""" filename: TraceGenerator.py
    contents: this script calls the GenerateSyntheticTrace method that
    creates and stream of memory references that models the memory
    performance of the input application or applications
    
    author: Trevor Gale
    date: 3.4.16"""

import h5py as h5

# TODO
# -1. test with multiple appProfiles
# 0. InputValidation
# 1. Generator program (generate list of numbers 1- 2**32/blocksize & remove when selected for unique blocks)
# 2. STL printing callback & error handling for incorrect input
# 3. Interface & usage info
# 4. Testing
# 5. Tool to generate profiles based on a PMF 
# 6. Provide indication that program is running (% or just a statement)
def GenerateSyntheticTrace(traceFile, traceLength, appProfiles, weights=[], traceFormat='STL'):
    """ GenerateSyntheticTrace: this function takes in application profiles
    generated by the \"ApplicationProfiler\" script and generates a synthetic
    address trace that models the properties of the input applications
    
    args:
        - traceFile: string specifying the name of the file to write the 
        synthetic address trace to (plain-text)
        
        - traceLength: desired length of the synthetic trace
        
        - appProfiles: python list of the names of the application profiles
        to model. At least one must be specified. If len(appProfiles) > 1, the
        applications profiles are mixed by creating a linear combination with 
        the weights specified by the "weights" parameters. If weights is left
        as default, a uniform distribution is used
        
        - weights: python list specifying the weights of each application. 
        Defaults to evenly weighted applications
        
        - traceFormat: callback function that is called to print the memory
        references. Function arguments must be (cycle, accessType, memAddress)"""
        
    # len(appProfiles) must be > 0. If > 1, len(weights) == 0 or == len(appProfiles)
    numProfiles = len(appProfiles)
    if numProfiles > 1 and not(len(weights) == 0 or len(weights) == numProfiles):
        raise ValueError("(in GenerateSyntheticTrace) if len(appProfiles) > 1, \
            len(weights) must be 0 or len(appProfiles)")
    
    # open application profiles
    for i in xrange(numProfiles):
        appProfiles[i] = h5.File(appProfiles[i])
    
    # close application profiles
    for i in xrange(numProfiles):
        appProfiles[i].close()
        
    # all profiles must have same top block size
    # must save alphaRatio for trace as well
    # TODO: add blockSize & alphaRatio to the application profiles

#
## main function
#
    
if __name__ == "__main__":
    # TODO: handle len(appProfiles) with config parser
    try:
        GenerateSyntheticTrace("testTrace.txt", 100, ['profiles/testProfile.h5', 'profiles/testProfile2.h5'])
    except IOError as error:
        print "IOError: " + str(error)
    